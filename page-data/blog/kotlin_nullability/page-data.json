{"componentChunkName":"component---src-components-post-js","path":"/blog/kotlin_nullability","result":{"data":{"markdownRemark":{"html":"<p>Coming from a Java background,like most Android devs, it is such a relief to work with Kotlin’s type system.\n<code class=\"language-text\">NullPointerException</code> os NPE hell is something I am very happy to do away with as I get more used to working with Kotlin.</p>\n<p>If we want to access a property, the compiler reports an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ this won't compile 👎</span></code></pre></div>\n<p>In order to access properties on nullable types, Kotlin gives us some options:</p>\n<h3>1. Check for <code class=\"language-text\">null</code> - This is the same approach as we do so often in Java</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\titem<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ this is ok👌</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Safe Call operator <code class=\"language-text\">?.</code></h3>\n<p>Safe calls are very useful when chaining different calls together, or on the left side of an assignment.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅</span></code></pre></div>\n<h3>3. With the elvis operator <code class=\"language-text\">?:</code>, we can assign a non-null value when our reference is of nullable type:</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> myInt<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">val</span> myLong<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> myInt<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0L</span> <span class=\"token comment\">// give alternative value in case myInt is null</span>\n<span class=\"token keyword\">val</span> myLong2 <span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInt <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> myInt <span class=\"token keyword\">else</span> <span class=\"token number\">0L</span> <span class=\"token comment\">// equivalent to expression above</span></code></pre></div>\n<h3>4. Lastly, we have the dreaded <code class=\"language-text\">!!</code> operator. ⚠️ This not-null assertion operator is really dangerous, so only use it if when…</h3>\n<div style=\"width:100%;height:0;padding-bottom:82%;position:relative;\"><iframe src=\"https://giphy.com/embed/KhliiAkDFP9YY\" width=\"100%\" height=\"100%\" style=\"position:absolute\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div><p><a href=\"https://giphy.com/gifs/KhliiAkDFP9YY\">via GIPHY</a></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 😡😡😡</span>\n<span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token operator\">!!</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 😾 will throw exception if value is null</span></code></pre></div>\n<p>Learn more about null safety in Kotlin here <a href=\"https://kotlinlang.org/docs/tutorials/kotlin-for-py/null-safety.html\">Null safety - Kotlin Programming Language</a></p>","frontmatter":{"title":"Nullability and Null Safety in Kotlin","date":"01/13/20"}},"meta":{"siteMetadata":{"title":"Muriel Gonzalez","url":"https://murielg.github.io"}}},"pageContext":{"pathSlug":"/blog/kotlin_nullability"}}}