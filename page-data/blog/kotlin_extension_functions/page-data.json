{
    "componentChunkName": "component---src-components-post-js",
    "path": "/blog/kotlin_extension_functions",
    "result": {"data":{"markdownRemark":{"html":"<p>Kotlin extension functions and properties are similar to member functions/properties, but defined outside of any class.  They let you extend the functionality of a class without having to derive a new class, or use any kind of design pattern.\nThis functionality is helpful when you want to modify classes that you don’t have access to, such as platform api’s or third-party classes.</p>\n<p>For example, take the following Android <code class=\"language-text\">toast</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">toast</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tToast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order to create a extension function so that Context can use this toast function, create a new file called <code class=\"language-text\">Extensions.kt</code> and add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Context<span class=\"token punctuation\">.</span><span class=\"token function\">toast</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we have created an extension function by prefixing the new function with the receiver type, in this case Android’s <code class=\"language-text\">Context</code> class.</p>\n<p>Now we are able to call <code class=\"language-text\">toast</code> from any class that extends from Context, such as an Activity or Fragment in Android:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">toast</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Extension functions are awesome!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we want to add default values for the extension’s parameters, we can specify them in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Context<span class=\"token punctuation\">.</span><span class=\"token function\">toast</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And use the extension with a default value, or with a different one:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token function\">toast</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Extension functions are awesome!\"</span></span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">toast</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Extension functions are awesome!\"</span></span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Just like extension functions, Kotlin also support extension properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>lastIndex<span class=\"token operator\">:</span> Int\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Extension functions only have access to public properties and functions of the class they are extendingxtension functions do not modify the classes or instances they are extending, but rather make these new functions callable via dot-notation, therefore making their integration with existing classes and objects appear seamless.\nNote that extensions are resolved statically:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> Vehicle\n<span class=\"token keyword\">class</span> Truck<span class=\"token operator\">:</span> <span class=\"token function\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> Vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Vehicle\"</span></span>\n<span class=\"token keyword\">fun</span> Truck<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Truck\"</span></span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">printClassName</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Vehicle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printClassName</span><span class=\"token punctuation\">(</span><span class=\"token function\">Truck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints Vehicle</span></code></pre></div>\n<p>The above snippet outputs <strong>Vehicle</strong> because the extension function <code class=\"language-text\">getName()</code> is determined by the declared type of the <code class=\"language-text\">v</code> parameter, which is of the <code class=\"language-text\">Vehicle</code> class.</p>\n<p>It would be very easy to use extensions to implement a wide variety abstractions that could make your code a lot harder to understand and mantain, so don’t abuse the power of extension functions.  And remember that static type is resolved at compiled time.</p>\n<p>To learn more, see Kotlin’s official documentation on Extensions <a href=\"https://kotlinlang.org/docs/reference/extensions.html\">Extensions - Kotlin Programming Language</a></p>","frontmatter":{"title":"Kotlin Extension Functions","date":"11/11/19"}},"meta":{"siteMetadata":{"title":"muriel gonzalez","url":"https://murielg.github.io"}}},"pageContext":{"pathSlug":"/blog/kotlin_extension_functions"}},
    "staticQueryHashes": ["3000541721"]}