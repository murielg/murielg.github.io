{
    "componentChunkName": "component---src-components-post-js",
    "path": "/blog/kotlin_nullability",
    "result": {"data":{"markdownRemark":{"html":"<p>As an android dev, it is very enjoyable working with Kotlin‚Äôs type system. With Kotlin's nullability support, it becomes much easier to avoid the <code class=\"language-text\">NullPointerException</code> hell that is so common when developing in Java.</p>\n<p>In this post, I will cover Kotlin's awesome built in null safety features and give some examples on how to use them.</p>\n<p>In Kotlin, we declare a nullable type with a question mark <code class=\"language-text\">?</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ‚ùå this won't compile üëé</span></code></pre></div>\n<p>When accessing the property of a nullable variable, the compiler's type checker will report an error and the code just won't compile.</p>\n<p>In order to properly test and work with nullable types, we have some options:</p>\n<h3>1. Check for <code class=\"language-text\">null</code></h3>\n<p>This is the same approach as we do so often in Java</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\titem<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ‚úÖ this is oküëå</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Safe Call operator <code class=\"language-text\">?.</code></h3>\n<p>Safe calls are very useful when chaining different calls together, or on the left side of an assignment.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ‚úÖ</span></code></pre></div>\n<h3>3. The elvis operator <code class=\"language-text\">?:</code></h3>\n<p>We can assign a non-null value when our reference is of nullable type:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> myInt<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token comment\">// give alternative value in case myInt is null</span>\n<span class=\"token keyword\">val</span> myLong<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> myInt<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0L</span>\n\n<span class=\"token comment\">// this is the equivalent to expression above</span>\n<span class=\"token keyword\">val</span> myLong2 <span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myInt <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> myInt <span class=\"token keyword\">else</span> <span class=\"token number\">0L</span></code></pre></div>\n<h3>4. The dreaded <code class=\"language-text\">!!</code> operator.</h3>\n<p>‚ö†Ô∏è This not-null assertion operator is really dangerous, so only use it when‚Ä¶</p>\n<div style=\"width:100%;height:0;padding-bottom:82%;position:relative;\"><iframe src=\"https://giphy.com/embed/KhliiAkDFP9YY\" width=\"100%\" height=\"100%\" style=\"position:absolute\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div><p><a href=\"https://giphy.com/gifs/KhliiAkDFP9YY\">via GIPHY</a></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// üò°üò°üò°</span>\n<span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> MediaItem<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nitem<span class=\"token operator\">!!</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// üòæ will throw exception if value is null</span>\n</code></pre></div>\n<p>Lastly, using <code class=\"language-text\">?.</code> allows us to throw different types of exceptions, however, <code class=\"language-text\">!!</code> will only be able to throw a <code class=\"language-text\">NullPointerException</code></p>\n<p>You can learn more about null safety in Kotlin here <a href=\"https://kotlinlang.org/docs/tutorials/kotlin-for-py/null-safety.html\">Null safety - Kotlin Programming Language</a></p>","frontmatter":{"title":"Null Safety in Kotlin","date":"01/13/20"}},"meta":{"siteMetadata":{"title":"muriel gonzalez","url":"https://murielg.github.io"}}},"pageContext":{"pathSlug":"/blog/kotlin_nullability"}},
    "staticQueryHashes": ["3000541721"]}