{"componentChunkName":"component---src-components-post-js","path":"/blog/kotlin_lambda_functions","result":{"data":{"markdownRemark":{"html":"<p>Lambda functions are anonymous functions that can be assigned to a variable and passed around like any other value.  Lambdas are super useful and convenient as they allow you to write a less code, while also improving the readability of your codebase by removing extra boilerplate.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> add<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Int <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> addition <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">:</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The two lambdas above take in two <code class=\"language-text\">Int</code> parameters and return an <code class=\"language-text\">Int</code>.\nThe second lambda takes advantage of type inference, and can be even shorter.</p>\n<p>If a lambda only takes in 1 parameter, you can shorten it further by using the reserved <code class=\"language-text\">it</code>  keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> double <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> it <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> square <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">*</span> it <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using lambdas allow us to simplify more complex functions. Wihout lambda:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Callback <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">onCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">doAsync</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> Callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  callback<span class=\"token punctuation\">.</span><span class=\"token function\">onCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Callback <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCallback</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With lambda:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">doAsync</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token operator\">-></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Iterating over collections also becomes really easy with the help of lambdas:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> allItems <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> priceyItems <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">></span> <span class=\"token number\">5.0</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lambdas can help in making your codebase more reusable, succint and easier to mantain.</p>\n<p>To learn more about Lambdas see <a href=\"https://kotlinlang.org/docs/reference/lambdas.html\">Higher-Order Functions and Lambdas - Kotlin Programming Language</a></p>","frontmatter":{"title":"Kotlin Lambda Functions","date":"11/13/19"}},"meta":{"siteMetadata":{"title":"blog by muriel gonzalez","url":"https://murielg.github.io"}}},"pageContext":{"pathSlug":"/blog/kotlin_lambda_functions"}}}